{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","bind","e","this","setState","target","value","fetch","then","res","json","users","filterdMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAEaA,G,kBAAK,SAAAC,GAAK,OACnB,yBAAKC,UAAU,kBACV,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YACjF,gCAAML,EAAMG,QAAQG,MACpB,+BAAKN,EAAMG,QAAQI,UCHdC,EAAW,SAAAR,GACxB,OAAO,yBAAKC,UAAU,aAGlBD,EAAMS,SAASC,IAAI,SAAAP,GAAO,OAAE,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,QCJjDS,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACzB,2BAAOC,KAAK,SACZd,UAAU,SACVY,YAAaA,EACbG,SAAUF,MCgCIG,E,YAjCZ,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTT,SAAS,GACTU,YAAY,IAEd,EAAKL,aAAc,EAAKA,aAAaM,KAAlB,gBANR,E,0EAQDC,GACXC,KAAKC,SAAS,CAACJ,YAAYE,EAAEG,OAAOC,U,0CAGhB,IAAD,OAChBC,MAAM,8CACJC,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACdF,KAAK,SAAAG,GAAK,OAAE,EAAKP,SAAS,CAACd,SAASqB,Q,+BAElC,IAAD,EAC0BR,KAAKJ,MAA9BT,EADD,EACCA,SAAUU,EADX,EACWA,YACXY,EAAiBtB,EAASuB,OAAO,SAAA7B,GAAO,OAAEA,EAAQG,KAAK2B,cAAcC,SAASf,EAAYc,iBAChG,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,SAAd,mBACA,kBAAC,EAAD,CAAWY,YAAY,iBACtBC,aAAcQ,KAAKR,eAEpB,kBAAC,EAAD,CAAUL,SAAUsB,S,GA3BVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.d3ba6f36.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.style.css'\r\nexport const Card=props=>(\r\n    <div className='card-container'>\r\n         <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h1> {props.monster.name}</h1>\r\n        <p> {props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react'\r\nimport './card-list.style.css'\r\nimport {Card} from '../card/card.component'\r\nexport const CardList = props=>{ \r\nreturn <div className='card-list'>\r\n{\r\n    \r\n    props.monsters.map(monster=><Card key={monster.id} monster={monster} ></Card>)\r\n}\r\n</div>\r\n}","import React from 'react'\r\nimport './search-box.style.css'\r\n\r\n  export const SearchBox =({placeholder,handleChange})=>(\r\n <input type=\"search\"\r\n className='search'\r\n placeholder={placeholder}\r\n onChange={handleChange}\r\n \r\n />\r\n)\r\n","import React,{Component} from 'react';\n import './App.css';\n import {CardList} from './components/card-list/card-list.component'\n import {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n   constructor(){\n     super();\n     this.state={\n       monsters:[],\n       searchField:''\n     }\n     this.handleChange= this.handleChange.bind(this)\n   }\n  handleChange(e){\n    this.setState({searchField:e.target.value})\n  }\n\n    componentDidMount(){\n       fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res=>res.json())  \n        .then(users=>this.setState({monsters:users}))       \n   }\n  render(){\n    const {monsters, searchField} = this.state\n    const filterdMonsters= monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase())) \n    return(\n      <div className=\"App\">\n        <h1 className=\"title\" >Monsters Roldex</h1>\n        <SearchBox placeholder='search monster'\n         handleChange={this.handleChange}>\n         </SearchBox>\n        <CardList monsters={filterdMonsters}></CardList>\n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}